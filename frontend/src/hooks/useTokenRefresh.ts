import { useEffect, useCallback, useRef } from 'react';
import { useDispatch } from 'react-redux';
import { logout } from '../store/slices/authSlice';

/**
 * ÌÜ†ÌÅ∞ ÏûêÎèô Í∞±Ïã† ÌõÖ
 * ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÍ∏∞ Ï†ÑÏóê ÏûêÎèôÏúºÎ°ú Í∞±Ïã†ÌïòÏó¨ ÏÑ∏ÏÖò Ïú†ÏßÄ
 */
export const useTokenRefresh = () => {
  const dispatch = useDispatch();
  const refreshTimerRef = useRef<NodeJS.Timeout | null>(null);

  // ÌÜ†ÌÅ∞ ÎîîÏΩîÎî© Ìï®Ïàò
  const decodeToken = useCallback((token: string) => {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      const jsonPayload = decodeURIComponent(
        atob(base64)
          .split('')
          .map((c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
          .join('')
      );
      return JSON.parse(jsonPayload);
    } catch (error) {
      console.error('Token decode error:', error);
      return null;
    }
  }, []);

  // ÌÜ†ÌÅ∞ ÎßåÎ£å ÏãúÍ∞Ñ ÌôïÏù∏
  const getTokenExpiration = useCallback((token: string): Date | null => {
    const decoded = decodeToken(token);
    if (decoded && decoded.exp) {
      return new Date(decoded.exp * 1000);
    }
    return null;
  }, [decodeToken]);

  // ÌÜ†ÌÅ∞Ïù¥ Í≥ß ÎßåÎ£åÎêòÎäîÏßÄ ÌôïÏù∏ (30Î∂Ñ Ïù¥ÎÇ¥)
  const isTokenExpiringSoon = useCallback((token: string): boolean => {
    const expiration = getTokenExpiration(token);
    if (!expiration) return true;
    
    const now = new Date();
    const timeUntilExpiry = expiration.getTime() - now.getTime();
    const thirtyMinutes = 30 * 60 * 1000; // 30Î∂ÑÏùÑ Î∞ÄÎ¶¨Ï¥àÎ°ú
    
    return timeUntilExpiry <= thirtyMinutes;
  }, [getTokenExpiration]);

  // ÌÜ†ÌÅ∞ Í∞±Ïã† Ìï®Ïàò
  const refreshToken = useCallback(async () => {
    try {
      const refreshToken = localStorage.getItem('refreshToken');
      if (!refreshToken) {
        console.log('‚ùå No refresh token available');
        return false;
      }

      console.log('üîÑ Attempting to refresh token...');
      
      // ÌòÑÏû¨ Í≤ΩÎ°úÍ∞Ä ÏÑ†Ïàò ÌéòÏù¥ÏßÄÏù∏ÏßÄ ÌôïÏù∏ÌïòÏó¨ Ï†ÅÏ†àÌïú API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©
      const isPlayerPage = window.location.pathname.startsWith('/player/');
      const refreshEndpoint = isPlayerPage ? '/player-auth/refresh' : '/auth/refresh';
      
      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000/api'}${refreshEndpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${refreshToken}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.data) {
          // ÏÉàÎ°úÏö¥ ÌÜ†ÌÅ∞ Ï†ÄÏû•
          localStorage.setItem('token', data.data.accessToken);
          if (data.data.refreshToken) {
            localStorage.setItem('refreshToken', data.data.refreshToken);
          }
          
          console.log('‚úÖ Token refreshed successfully');
          
          // Îã§Ïùå Í∞±Ïã† Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ï
          scheduleTokenRefresh(data.data.accessToken);
          return true;
        }
      }
      
      console.log('‚ùå Token refresh failed');
      return false;
    } catch (error) {
      console.error('‚ùå Token refresh error:', error);
      return false;
    }
  }, []);

  // ÌÜ†ÌÅ∞ Í∞±Ïã† Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ï
  const scheduleTokenRefresh = useCallback((token: string) => {
    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
    if (refreshTimerRef.current) {
      clearTimeout(refreshTimerRef.current);
    }

    const expiration = getTokenExpiration(token);
    if (!expiration) {
      console.log('‚ùå Cannot schedule refresh - invalid token');
      return;
    }

    const now = new Date();
    const timeUntilExpiry = expiration.getTime() - now.getTime();
    
    // ÎßåÎ£å 30Î∂Ñ Ï†ÑÏóê Í∞±Ïã† (ÏµúÏÜå 1Î∂Ñ ÌõÑ)
    const refreshTime = Math.max(timeUntilExpiry - (30 * 60 * 1000), 60 * 1000);
    
    console.log(`‚è∞ Token refresh scheduled in ${Math.round(refreshTime / 1000 / 60)} minutes`);

    refreshTimerRef.current = setTimeout(async () => {
      console.log('üîÑ Auto-refreshing token...');
      const success = await refreshToken();
      
      if (!success) {
        console.log('‚ùå Auto-refresh failed, logging out...');
        // Í∞±Ïã† Ïã§Ìå® Ïãú Î°úÍ∑∏ÏïÑÏõÉ
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
        localStorage.removeItem('user');
        dispatch(logout());
        
        // ÏÑ†Ïàò ÌéòÏù¥ÏßÄÎùºÎ©¥ ÏÑ†Ïàò Î°úÍ∑∏Ïù∏ÏúºÎ°ú, ÏïÑÎãàÎ©¥ Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏ÏúºÎ°ú
        if (window.location.pathname.startsWith('/player/')) {
          window.location.href = '/player/login';
        } else {
          window.location.href = '/login';
        }
      }
    }, refreshTime);
  }, [getTokenExpiration, refreshToken, dispatch]);

  // ÌÜ†ÌÅ∞ Ï≤¥ÌÅ¨ Î∞è Í∞±Ïã† ÏãúÏûë
  const startTokenRefresh = useCallback(() => {
    const token = localStorage.getItem('token');
    if (token) {
      console.log('üîç Checking token expiration...');
      
      // Ï¶âÏãú ÎßåÎ£å ÌôïÏù∏
      if (isTokenExpiringSoon(token)) {
        console.log('‚ö†Ô∏è Token expires soon, refreshing immediately...');
        refreshToken();
      } else {
        // ÎØ∏Îûò Í∞±Ïã† Ïä§ÏºÄÏ§Ñ
        scheduleTokenRefresh(token);
      }
    }
  }, [isTokenExpiringSoon, refreshToken, scheduleTokenRefresh]);

  // Ï†ïÎ¶¨ Ìï®Ïàò
  const cleanup = useCallback(() => {
    if (refreshTimerRef.current) {
      clearTimeout(refreshTimerRef.current);
      refreshTimerRef.current = null;
    }
  }, []);

  useEffect(() => {
    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌÜ†ÌÅ∞ Í∞±Ïã† ÏãúÏûë
    startTokenRefresh();

    // storage Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà (Îã§Î•∏ ÌÉ≠ÏóêÏÑú ÌÜ†ÌÅ∞ Î≥ÄÍ≤Ω Ïãú)
    const handleStorageChange = () => {
      startTokenRefresh();
    };

    window.addEventListener('storage', handleStorageChange);

    // ÌÅ¥Î¶∞ÏóÖ
    return () => {
      cleanup();
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [startTokenRefresh, cleanup]);

  return {
    refreshToken,
    startTokenRefresh,
    cleanup
  };
};

export default useTokenRefresh;