generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 관리자 모델
model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// 선수 모델 - ELO 레이팅 시스템 포함
model Player {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  phone             String
  birthYear         Int
  birthDate         DateTime? // 정확한 생년월일
  gender            String    // "male", "female"
  province          String
  district          String
  address           String?   // 상세주소
  emergencyContact  String?   // 비상연락처 이름
  emergencyPhone    String?   // 비상연락처 전화번호
  
  // 인증 관련 필드
  password          String?   // 선수 로그인용 비밀번호 (null이면 로그인 불가)
  isVerified        Boolean   @default(false) // 이메일 인증 여부
  verifyToken       String?   // 이메일 인증 토큰
  verifyTokenExpiry DateTime? // 인증 토큰 만료시간
  passwordResetToken String?  // 비밀번호 재설정 토큰
  passwordResetExpiry DateTime? // 비밀번호 재설정 토큰 만료시간
  lastLoginAt       DateTime? // 마지막 로그인 시간
  
  // ELO 레이팅 시스템
  eloRating         Int       @default(1200)   // 초기 레이팅
  skillLevel        String    @default("beginner") // "beginner", "intermediate", "advanced", "expert"
  confidenceIndex   Float     @default(0.0)    // 0.0-1.0, 경기 횟수 기반 신뢰도
  totalMatches      Int       @default(0)      // 총 경기 횟수
  wins              Int       @default(0)      // 승수
  losses            Int       @default(0)      // 패수
  
  // Advanced ELO 시스템 - 새로 추가되는 필드들
  consistencyIndex  Float     @default(1.0)    // 일관성 지수 (0.0-1.0)
  momentumScore     Float     @default(0.0)    // 모멘텀 점수
  performanceIndex  Float     @default(1200.0) // 종합 성능 지수
  lastFormUpdate    DateTime? // 마지막 폼 업데이트 시간
  
  // 선수 이력
  lastMatchDate     DateTime?
  registrationDate  DateTime  @default(now())
  isActive          Boolean   @default(true)
  notes             String?   // 특이사항
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // 관계
  participations    Participant[]
  partnerParticipations Participant[] @relation("PartnerParticipant")
  player1Matches    Match[]   @relation("Player1Matches")
  player2Matches    Match[]   @relation("Player2Matches")
  ratingHistory     PlayerRatingHistory[]
  
  // 복식 팀 관계
  teamsAsPlayer1    Team[]    @relation("TeamPlayer1")
  teamsAsPlayer2    Team[]    @relation("TeamPlayer2")

  @@map("players")
}

// 복식 팀 모델
model Team {
  id          String   @id @default(uuid())
  name        String   // 팀 이름 (예: "김철수/이영희")
  
  // 팀원들
  player1Id   String
  player2Id   String
  player1     Player   @relation("TeamPlayer1", fields: [player1Id], references: [id], onDelete: Cascade)
  player2     Player   @relation("TeamPlayer2", fields: [player2Id], references: [id], onDelete: Cascade)
  
  // 복식 관련 레이팅
  teamRating  Int      @default(0) // 두 선수의 평균 레이팅
  
  // 생성 정보
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 참가 내역
  participations Participant[]
  
  @@unique([player1Id, player2Id]) // 같은 조합 팀 중복 방지
  @@map("teams")
}

// 선수 레이팅 히스토리
model PlayerRatingHistory {
  id            String   @id @default(uuid())
  playerId      String
  oldRating     Int
  newRating     Int
  ratingChange  Int
  matchId       String?
  reason        String   // "match_result", "manual_adjustment", "system_recalc"
  createdAt     DateTime @default(now())
  
  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@map("player_rating_history")
}

// 대회 정보
model Tournament {
  id                  String   @id @default(uuid())
  name                String
  description         String?
  category            String   // 스포츠 종목: "badminton", "tennis", "tabletennis" 등
  
  // 대회 일정
  startDate           DateTime
  endDate             DateTime
  registrationStart   DateTime
  registrationEnd     DateTime
  
  // 장소 정보
  location            String
  locationLat         Float?
  locationLng         Float?
  venue               String
  
  // 대회 설정
  maxParticipants     Int      @default(100)
  minSkillLevel       Int      @default(1000)    // 최소 ELO 레이팅
  maxSkillLevel       Int      @default(3000)    // 최대 ELO 레이팅
  skillDiffLimit      Int      @default(200)     // 같은 조 내 최대 점수 차이
  tournamentType      String   @default("single_elimination") // "single_elimination", "double_elimination", "round_robin"
  skillLevel          String   @default("all")   // "all", "d_class", "c_class", "b_class", "a_class"
  
  // 가격 및 결제
  participantFee      Int      @default(0)
  organizerFee        Int      @default(50000)   // 주최자가 지불하는 수수료
  pricingTier         String   @default("basic") // "basic", "standard", "premium"
  
  // 대회 상태
  status              String   @default("draft") // "draft", "open", "closed", "ongoing", "completed"
  
  // 추가 정보
  posterImage         String?
  rulesDocument       String?
  contactPhone        String?
  contactEmail        String?
  bankInfo            String?
  organizerInfo       String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // 관계
  participants        Participant[]
  brackets            Bracket[]
  matches             Match[]
  schedules           Schedule[]
  paymentRecords      PaymentRecord[]

  @@map("tournaments")
}

// 참가자 (선수와 대회의 중간 테이블)
model Participant {
  id               String    @id @default(uuid())
  tournamentId     String
  playerId         String
  
  // 참가 정보
  eventType        String    @default("singles") // "singles", "doubles"
  partnerPlayerId  String?   // 복식의 경우 파트너 ID
  teamId           String?   // 복식 팀 ID
  
  // 등급 정보 (참가 시점의 스냅샷)
  registrationElo  Int       // 등록 시점의 ELO 레이팅
  assignedGroup    String?   // 배정된 그룹/조
  seedNumber       Int?      // 시드 번호
  
  // 상태 정보
  registrationDate DateTime  @default(now())
  paymentStatus    String    @default("pending") // "pending", "completed", "failed", "refunded"
  approvalStatus   String    @default("pending") // "pending", "approved", "rejected"
  isActive         Boolean   @default(true)
  
  // 관계
  tournament       Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player           Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  partnerPlayer    Player?    @relation("PartnerParticipant", fields: [partnerPlayerId], references: [id])
  team             Team?      @relation(fields: [teamId], references: [id])

  @@unique([tournamentId, playerId])
  @@map("participants")
}

// 대진표/브래킷
model Bracket {
  id              String   @id @default(uuid())
  tournamentId    String
  name            String
  eventType       String   @default("singles") // "singles", "doubles"
  skillLevelMin   Int      // 최소 ELO 레이팅
  skillLevelMax   Int      // 최대 ELO 레이팅
  
  // 브래킷 설정
  type            String   @default("single_elimination") // "single_elimination", "double_elimination", "round_robin"
  maxParticipants Int      @default(32)
  
  // 대진표 데이터 (JSON)
  participants    String   // JSON 배열 형태의 참가자 정보
  bracketData     String?  // JSON 형태의 대진표 구조
  
  // 상태
  status          String   @default("draft") // "draft", "published", "ongoing", "completed"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // 관계
  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  matches         Match[]

  @@map("brackets")
}

// 경기
model Match {
  id              String    @id @default(uuid())
  tournamentId    String
  bracketId       String?
  
  // 경기 정보
  roundName       String    // "Round 1", "Quarter Final", "Semi Final", "Final"
  matchNumber     Int
  
  // 선수 정보
  player1Id       String?
  player2Id       String?
  player1Name     String?   // 스냅샷용
  player2Name     String?   // 스냅샷용
  
  // 경기 결과
  player1Score    Int       @default(0)
  player2Score    Int       @default(0)
  winnerId        String?
  
  // ELO 변화량 추적
  player1EloChange Int?     // 선수1 ELO 변화량
  player2EloChange Int?     // 선수2 ELO 변화량
  
  // 일정 정보
  courtNumber     Int?
  scheduledTime   DateTime?
  actualStartTime DateTime?
  actualEndTime   DateTime?
  
  // 상태 및 기타
  status          String    @default("scheduled") // "scheduled", "ongoing", "completed", "cancelled"
  notes           String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // 관계
  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  bracket         Bracket?   @relation(fields: [bracketId], references: [id], onDelete: Cascade)
  player1         Player?    @relation("Player1Matches", fields: [player1Id], references: [id])
  player2         Player?    @relation("Player2Matches", fields: [player2Id], references: [id])

  @@map("matches")
}

// 일정 관리
model Schedule {
  id           String     @id @default(uuid())
  tournamentId String
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  courtNumber  Int?
  type         String     @default("match") // "match", "ceremony", "break", "other"
  isPublic     Boolean    @default(true)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("schedules")
}

// 결제 기록
model PaymentRecord {
  id              String     @id @default(uuid())
  tournamentId    String
  
  // 결제 정보
  paymentType     String     // "organizer_fee", "participant_fee", "additional_service"
  amount          Int        // 결제 금액 (원)
  currency        String     @default("KRW")
  
  // 결제 상태
  status          String     @default("pending") // "pending", "completed", "failed", "cancelled", "refunded"
  paymentMethod   String?    // "card", "bank_transfer", "mobile"
  transactionId   String?    // 외부 결제 시스템 거래 ID
  
  // 메타데이터
  description     String?    // 결제 설명
  metadata        String?    // JSON 형태의 추가 정보
  
  paidAt          DateTime?  // 결제 완료 시간
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@map("payment_records")
}

// 시스템 설정
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}