# 🚀 Tournament Management System - Production Docker Compose
# HTTPS 지원과 Let's Encrypt 인증서를 포함한 프로덕션 배포

version: '3.8'

services:
  # 🗄️ PostgreSQL 데이터베이스
  database:
    image: postgres:15-alpine
    container_name: tournament-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: tournament_db
      POSTGRES_USER: tournament_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tournament_user -d tournament_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 🔴 Redis (캐싱 및 세션 스토어)
  redis:
    image: redis:7-alpine
    container_name: tournament-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 🚀 백엔드 API 서버
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: tournament-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://tournament_user:${DB_PASSWORD}@database:5432/tournament_db
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ACCESS_EXPIRES_IN: 1h
      JWT_REFRESH_EXPIRES_IN: 7d
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      CLIENT_URL: https://${DOMAIN}
      BCRYPT_SALT_ROUNDS: 12
      SESSION_SECRET: ${SESSION_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      MAX_FILE_SIZE: 10MB
      UPLOAD_DIR: uploads
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tournament-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 🌐 프론트엔드 (React + Nginx)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tournament-frontend-prod
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: https://api.${DOMAIN}
      REACT_APP_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tournament-network

  # 🔒 Nginx 리버스 프록시 (SSL 지원)
  nginx:
    image: nginx:alpine
    container_name: tournament-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - tournament-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # 🔐 Let's Encrypt SSL 인증서
  certbot:
    image: certbot/certbot
    container_name: tournament-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # 📊 모니터링: Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tournament-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - tournament-network

  # 📈 대시보드: Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: tournament-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - tournament-network

  # 🛡️ 방화벽: Fail2Ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: tournament-fail2ban
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - /var/log:/var/log:ro

# 📁 볼륨 설정
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 🌐 네트워크 설정
networks:
  tournament-network:
    driver: bridge